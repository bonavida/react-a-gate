{"version":3,"sources":["components/Layout/Header/index.js","components/Layout/Header/Header.jsx","components/Layout/Footer/index.js","components/Layout/Footer/Footer.jsx","components/Layout/index.js","components/Layout/Layout.jsx","components/Modal/Modal.jsx","components/Modal/index.js","components/CodeBlock/index.js","components/CodeBlock/CodeBlock.jsx","pages/ModalPage/index.js","pages/ModalPage/ModalPage.jsx","snippets/modal.js","context/RadioGroupContext.jsx","components/RadioGroup/RadioButton/index.js","components/RadioGroup/RadioButton/RadioButton.jsx","components/RadioGroup/index.js","components/RadioGroup/RadioGroup.jsx","components/Checkbox/index.js","components/Checkbox/Checkbox.jsx","pages/TooltipPage/TooltipPage.jsx","pages/TooltipPage/index.js","snippets/tooltip.js","pages/PopoverPage/PopoverPage.jsx","routes/config.js","snippets/popover.js","routes/Routes.jsx","utils/fontAwesomeLibrary.js","containers/App/App.jsx","containers/App/index.js","index.jsx"],"names":["Header","className","to","isActive","_","pathname","includes","Footer","Date","getFullYear","href","target","rel","icon","Layout","children","Modal","onClose","onClick","Body","CodeBlock","language","value","style","prism","ModalPage","useState","isFirstOpen","setIsFirstOpen","isSecondOpen","setIsSecondOpen","closeFirstModal","closeSecondModal","type","id","isOpen","RadioGroupContext","createContext","RadioButton","props","context","useContext","htmlFor","RadioGroup","name","options","valueProperty","labelProperty","initialValue","onChange","inputProps","useRadioGroup","Provider","map","option","label","defaultChecked","key","Checkbox","handleChange","useCallback","checked","defaultTriggerPositions","defaultTooltipPositions","defaultThemes","TooltipContent","color","TooltipPage","triggerPosition","setTriggerPosition","tooltipPosition","setTooltipPosition","theme","setTheme","isCustom","setIsCustom","changeTriggerPosition","position","changeTooltipPosition","changeUseCustom","changeTheme","content","place","defaultPopoverPositions","defaultModes","PopoverContent","routes","path","exact","RouteComponent","popoverPosition","setPopoverPosition","mode","setMode","changePopoverPosition","changeMode","marginTop","Routes","Array","isArray","component","library","add","fab","faTimes","App","basename","mountNode","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.7488e053.chunk.js","sourcesContent":["import Header from './Header';\n\nexport default Header;\n","import React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\n/** Styles */\nimport './Header.scss';\n\nconst Header = () => (\n  <div className=\"header__container\">\n    <h1 className=\"header__title\">\n      <Link to=\"/\">react-a-gate <span>demos</span></Link>\n    </h1>\n    <ul className=\"header__menu\">\n      <li className=\"header__menu-item\">\n        <NavLink\n          to=\"/modal\"\n          isActive={(_, { pathname }) => ['/', '/modal'].includes(pathname)}\n        >\n          Modal\n        </NavLink>\n      </li>\n      <li className=\"header__menu-item\">\n        <NavLink to=\"/tooltip\">Tooltip</NavLink>\n      </li>\n      <li className=\"header__menu-item\">\n        <NavLink to=\"/popover\">Popover</NavLink>\n      </li>\n    </ul>\n  </div>\n);\n\nexport default Header;\n","import Footer from './Footer';\n\nexport default Footer;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n/** Styles */\nimport './Footer.scss';\n\nconst Footer = () => (\n  <div className=\"footer__container\">\n    <span className=\"footer__author\">bonavida</span>\n    <span className=\"footer__year\">{new Date().getFullYear()}</span>\n    <div className=\"footer__divider\" />\n    <a\n      href=\"https://github.com/bonavida/react-a-gate\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"footer__link\"\n    >\n      <FontAwesomeIcon className=\"footer__icon\" icon={['fab', 'github']} />\n    </a>\n  </div>\n);\n\nexport default Footer;\n","import Layout from './Layout';\n\nexport default Layout;\n","import React from 'react';\n/** Components */\nimport Header from './Header';\nimport Footer from './Footer';\n/** Styles */\nimport './Layout.scss';\n\nconst Layout = ({ children }) => (\n  <div className=\"layout__container\">\n    <Header />\n    <div className=\"layout__content\">{children}</div>\n    <Footer />\n  </div>\n);\n\nexport default Layout;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n/** Styles */\nimport './Modal.scss';\n\nconst ModalHeader = ({ children, onClose }) => (\n  <header className=\"modal__header\">\n    <h2>{children}</h2>\n    <FontAwesomeIcon\n      icon=\"times\"\n      className=\"modal__close\"\n      onClick={() => onClose()}\n    />\n  </header>\n);\n\nconst ModalBody = ({ children }) => (\n  <section className=\"modal__body\">{children}</section>\n);\n\nconst ModalFooter = ({ children }) => (\n  <footer className=\"modal__footer\">{children}</footer>\n);\n\nconst Modal = ({ children }) => <>{children}</>;\n\nModal.Header = ModalHeader;\nModal.Body = ModalBody;\nModal.Footer = ModalFooter;\n\nexport default Modal;\n","import Modal from './Modal';\n\nexport default Modal;\n","import CodeBlock from './CodeBlock';\n\nexport default CodeBlock;\n","import React from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';\n/** Styles */\nimport './CodeBlock.scss';\n\nconst CodeBlock = ({ language = 'jsx', value }) => {\n  return (\n    <SyntaxHighlighter className=\"codeblock\" language={language} style={prism}>\n      {value}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeBlock;\n","import ModalPage from './ModalPage';\n\nexport default ModalPage;\n","import React, { useState } from 'react';\nimport { ModalGate } from 'react-a-gate';\n/** Components */\nimport Modal from 'components/Modal';\nimport CodeBlock from 'components/CodeBlock';\n/** Snippets */\nimport {\n  modal_example_1,\n  modal_example_2_1,\n  modal_example_2_2,\n} from 'snippets';\n/** Styles */\nimport './ModalPage.scss';\n\nconst ModalPage = () => {\n  const [isFirstOpen, setIsFirstOpen] = useState(false);\n  const [isSecondOpen, setIsSecondOpen] = useState(false);\n\n  const openFirstModal = () => setIsFirstOpen(true);\n  const closeFirstModal = () => setIsFirstOpen(false);\n  const openSecondModal = () => setIsSecondOpen(true);\n  const closeSecondModal = () => setIsSecondOpen(false);\n\n  return (\n    <div className=\"modalPage__container\">\n      <div className=\"modalPage__example\">\n        <h2 className=\"modalPage__title\">Example 1</h2>\n        <div className=\"modalPage__block\">\n          <CodeBlock value={modal_example_1}></CodeBlock>\n          <div className=\"modalPage__trigger\">\n            <button type=\"button\" className=\"App-button\" onClick={openFirstModal}>\n              Open modal\n            </button>\n            <ModalGate\n              id=\"app_modal_1\"\n              isOpen={isFirstOpen}\n              onClose={closeFirstModal}\n            >\n              <Modal>\n                <Modal.Header onClose={closeFirstModal}>Modal</Modal.Header>\n                <Modal.Body>\n                  <div className=\"modal__example\">\n                    <div>\n                      Things you can do with <b>ModalGate</b>:\n                    </div>\n                    <ul>\n                      <li>\n                        You can render any kind of modal you want, just code and\n                        customize your own!\n                      </li>\n                      <li>You can also render plain text.</li>\n                      <li>Scroll on the background is disabled.</li>\n                      <li>\n                        What if you want to close it? Just press the ESC key or\n                        click outside the modal. Or even put your own button and\n                        close it from the inside!\n                      </li>\n                    </ul>\n                  </div>\n                </Modal.Body>\n                <Modal.Footer>\n                  <button\n                    type=\"button\"\n                    className=\"modal__button\"\n                    onClick={closeFirstModal}\n                  >\n                    Close\n                  </button>\n                </Modal.Footer>\n              </Modal>\n            </ModalGate>\n          </div>\n        </div>\n      </div>\n      <div className=\"modalPage__example\">\n        <h2 className=\"modalPage__title\">Example 2: <span>Customize modal</span></h2>\n        <div className=\"modalPage__block\">\n          <div>\n            <CodeBlock value={modal_example_2_1}></CodeBlock>\n            <CodeBlock language=\"sass\" value={modal_example_2_2}></CodeBlock>\n          </div>\n          <div className=\"modalPage__trigger custom-modal\">\n            <button\n              type=\"button\"\n              className=\"App-button\"\n              onClick={openSecondModal}\n            >\n              Open modal\n            </button>\n            <ModalGate\n              id=\"app_modal_2\"\n              className=\"custom-modal\"\n              isOpen={isSecondOpen}\n              onClose={closeSecondModal}\n            >\n              <Modal>\n                <Modal.Header onClose={closeSecondModal}>Modal</Modal.Header>\n                <Modal.Body>\n                  <div className=\"modal__example\">\n                    <div>\n                      Things you can do with <b>ModalGate</b>:\n                    </div>\n                    <ul>\n                      <li>\n                        You can render any kind of modal you want, just code and\n                        customize your own!\n                      </li>\n                      <li>You can also render plain text.</li>\n                      <li>Scroll on the background is disabled.</li>\n                      <li>\n                        What if you want to close it? Just press the ESC key or\n                        click outside the modal. Or even put your own button and\n                        close it from the inside!\n                      </li>\n                    </ul>\n                  </div>\n                </Modal.Body>\n                <Modal.Footer>\n                  <button\n                    type=\"button\"\n                    className=\"modal__button\"\n                    onClick={closeSecondModal}\n                  >\n                    Close\n                  </button>\n                </Modal.Footer>\n              </Modal>\n            </ModalGate>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ModalPage;\n","export const modal_example_1 = `\nimport React, { useState } from 'react';\nimport { ModalGate } from 'react-a-gate';\n\nimport Modal from 'components/Modal';\n\nconst App = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const openModal = () => setIsOpen(true);\n  const closeModal = () => setIsOpen(false);\n\n  return (\n    <>\n      <!-- Element that triggers the opening of the modal -->\n      <button type=\"button\" className=\"App-button\" onClick={openModal}>\n        Open modal\n      </button>\n      <!-- ModalGate wrapper -->\n      <ModalGate id=\"app_modal_1\" isOpen={isOpen} onClose={closeModal}>\n        <!-- Modal here is a component I created only for the purpose of this demo.\n          It can be any React component that you want or any text or container. --> \n        <Modal>\n          <Modal.Header onClose={closeModal}>Modal</Modal.Header>\n          <Modal.Body>This is a modal</Modal.Body>\n          <Modal.Footer>\n            <button\n              type=\"button\"\n              className=\"modal__button\"\n              onClick={closeModal}\n            >\n              Close\n            </button>\n          </Modal.Footer>\n        </Modal>\n      </ModalGate>\n    </>\n  );\n};\n`;\n\nexport const modal_example_2_1 = `\n// To override the default modal styles, you can pass\n// a custom CSS class through the className prop.\n// ...\n<ModalGate\n  id=\"app_modal_2\"\n  className=\"custom-modal\"\n  isOpen={isSecondOpen}\n  onClose={closeSecondModal}\n>\n  <Modal>\n    ...\n  </Modal>\n</ModalGate>\n// ...\n`;\n\nexport const modal_example_2_2 = `\n// And then you can just define your own custom styles.\n// The two main CSS classes are:\n// modal__backdrop (custom-modal will override the css properties from this class)\n// modal__content\n\n.custom-modal {\n  // Override default styles\n  .modal__content {\n    opacity: 0.9;\n    max-width: 20%;\n    border: none;\n  }\n\n  // Custom modal styles\n  .modal__header,\n  .modal__body,\n  .modal__footer {\n    color: white;\n    background-color: #333;\n  }\n\n  .modal__button {\n    background-color: #333;\n    border: 1px solid white;\n  }\n}\n`;\n","import { createContext } from 'react';\n\nconst RadioGroupContext = createContext();\nexport default RadioGroupContext;\n","import RadioButton from './RadioButton';\n\nexport default RadioButton;\n","import React, { useContext } from 'react';\n/** Context */\nimport { RadioGroupContext } from 'context';\n/** Styles */\nimport './RadioButton.scss';\n\nconst RadioButton = ({ children, id, ...props }) => {\n  const context = useContext(RadioGroupContext);\n\n  return (\n    <label className=\"radio__label\" htmlFor={id}>\n      <input className=\"radio__input\" id={id} {...props} {...context} />\n      <span className=\"radio__fake-input\"></span>\n      <span className=\"radio__text\">{children}</span>\n    </label>\n  );\n};\n\nexport default RadioButton;\n","import RadioGroup from './RadioGroup';\n\nexport default RadioGroup;\n","import React from 'react';\n/** Context */\nimport { RadioGroupContext } from 'context';\n/** Components */\nimport RadioButton from './RadioButton';\n/** Styles */\nimport './RadioGroup.scss';\n\nconst useRadioGroup = (name, onChange) => {\n  const handleChange = ({ target: { value } }) => {\n    onChange && onChange(value);\n  };\n\n  return {\n    type: 'radio',\n    name,\n    onChange: handleChange,\n  };\n};\n\nconst RadioGroup = ({\n  name,\n  options = [],\n  valueProperty = 'value',\n  labelProperty = 'label',\n  initialValue,\n  onChange,\n}) => {\n  const inputProps = useRadioGroup(name, onChange);\n\n  return (\n    <div className=\"radio__group\">\n      <RadioGroupContext.Provider value={inputProps}>\n        {options.map((option) => {\n          const value = option[valueProperty];\n          const label = option[labelProperty];\n          return (\n            <RadioButton\n              id={`${name}_${value}`}\n              value={value}\n              defaultChecked={initialValue === value}\n              key={value}\n            >\n              {label}\n            </RadioButton>\n          );\n        })}\n      </RadioGroupContext.Provider>\n    </div>\n  );\n};\n\nexport default RadioGroup;\n","import Checkbox from './Checkbox';\n\nexport default Checkbox;\n","import React, { useCallback } from 'react';\n/** Styles */\nimport './Checkbox.scss';\n\nconst Checkbox = ({\n  id,\n  value,\n  defaultChecked = false,\n  children,\n  onChange,\n}) => {\n  const handleChange = useCallback(\n    ({ target: { checked } }) => {\n      onChange(checked);\n    },\n    [onChange]\n  );\n\n  return (\n    <div className=\"checkbox\">\n      <input\n        className=\"checkbox__check\"\n        type=\"checkbox\"\n        id={id}\n        value={value}\n        defaultChecked={defaultChecked}\n        onChange={handleChange}\n      />\n      <label className=\"checkbox__label\" htmlFor={id}>\n        <span className=\"checkbox__box\"></span>\n        <span className=\"checkbox__text\">{children}</span>\n      </label>\n    </div>\n  );\n};\n\nexport default Checkbox;\n","import React, { useCallback, useState } from 'react';\nimport { TooltipGate } from 'react-a-gate';\n/** Components */\nimport CodeBlock from 'components/CodeBlock';\nimport RadioGroup from 'components/RadioGroup';\nimport Checkbox from 'components/Checkbox';\n/** Snippets */\nimport { tooltip_example_1, tooltip_example_2 } from 'snippets';\n/** Styles */\nimport './TooltipPage.scss';\n\nconst defaultTriggerPositions = [\n  { label: 'Top', value: 'top' },\n  { label: 'Bottom', value: 'bottom' },\n  { label: 'Left', value: 'left' },\n  { label: 'Right', value: 'right' },\n];\n\nconst defaultTooltipPositions = [\n  { label: 'Top', value: 'top' },\n  { label: 'Bottom', value: 'bottom' },\n  { label: 'Left', value: 'left' },\n  { label: 'Right', value: 'right' },\n];\n\nconst defaultThemes = [\n  { label: 'Dark', value: 'dark' },\n  { label: 'Light', value: 'light' },\n];\n\nconst TooltipContent = () => (\n  <div>\n    I am a <span style={{ color: '#ffd500' }}>tooltip</span>. Every time you\n    move me, I calculate my position automatically. So, if I should be displayed\n    on the top but there's no space, I just move to the bottom. Same goes for\n    the other positions. If you want to see it, just play around!\n  </div>\n);\n\nconst TooltipPage = () => {\n  const [triggerPosition, setTriggerPosition] = useState('top');\n  const [tooltipPosition, setTooltipPosition] = useState('top');\n  const [theme, setTheme] = useState('dark');\n  const [isCustom, setIsCustom] = useState(false);\n\n  const changeTriggerPosition = useCallback((position) => {\n    setTriggerPosition(position);\n  }, []);\n\n  const changeTooltipPosition = useCallback((position) => {\n    setTooltipPosition(position);\n  }, []);\n\n  const changeUseCustom = useCallback((value) => {\n    setIsCustom(value);\n\n    if (!value) {\n      setTheme('dark');\n    }\n  }, []);\n\n  const changeTheme = useCallback((theme) => {\n    setTheme(theme);\n  }, []);\n\n  return (\n    <div className=\"tooltipPage__container\">\n      <div className=\"tooltipPage__wrapper\">\n        <div className=\"tooltipPage__config\">\n          <div className=\"tooltipPage__block\">\n            <h5>Trigger position:</h5>\n            <RadioGroup\n              name=\"trigger_position\"\n              options={defaultTriggerPositions}\n              initialValue=\"top\"\n              onChange={changeTriggerPosition}\n            />\n            <h5>Tooltip position:</h5>\n            <RadioGroup\n              name=\"tooltip_position\"\n              options={defaultTooltipPositions}\n              initialValue=\"top\"\n              onChange={changeTooltipPosition}\n            />\n          </div>\n          <div className=\"tooltipPage__block\">\n            {!isCustom && (\n              <>\n                <h5>Theme:</h5>\n                <RadioGroup\n                  name=\"tooltip_theme\"\n                  options={defaultThemes}\n                  initialValue=\"dark\"\n                  onChange={changeTheme}\n                />\n              </>\n            )}\n            <Checkbox\n              id=\"custom__tooltip\"\n              value=\"custom_tooltip\"\n              defaultChecked={isCustom}\n              onChange={changeUseCustom}\n            >\n              Customize tooltip?\n            </Checkbox>\n          </div>\n        </div>\n        <CodeBlock value={tooltip_example_1}></CodeBlock>\n        <CodeBlock language=\"sass\" value={tooltip_example_2}></CodeBlock>\n        <br/>\n        <br/>\n      </div>\n      <div className={`tooltipPage__button-wrapper tooltipPage__button-wrapper--${triggerPosition}`}>\n        <TooltipGate\n          content={<TooltipContent />}\n          place={tooltipPosition}\n          theme={theme}\n          className={`custom-tooltip${isCustom ? ' blue' : ''}`}\n        >\n          <button\n            type=\"button\"\n            className=\"tooltipPage__button\"\n          >\n            Hover me\n          </button>\n        </TooltipGate>\n      </div>\n    </div>\n  );\n};\n\nexport default TooltipPage;\n","import TooltipPage from './TooltipPage';\n\nexport default TooltipPage;\n","export const tooltip_example_1 = `\nimport React, { useState } from 'react';\nimport { TooltipGate } from 'react-a-gate';\n/** Styles */\nimport './App.scss';\n\nconst TooltipContent = () => (\n  <div>\n    I am a <span style={{ color: '#ffd500' }}>tooltip</span>. Every time you\n    move me, I calculate my position automatically. So, if I should be displayed\n    on the top but there's no space, I just move to the bottom. Same goes for\n    the other positions. If you want to see it, just play around!\n  </div>\n);\n\nconst App = () => (\n  <!-- Tooltip wrapper -->\n  <TooltipGate\n    content={<TooltipContent />}\n    place=\"top\"\n    className=\"custom-tooltip\"\n  >\n    <!-- Trigger element -->\n    <button type=\"button\" className='tooltipPage__button'>\n      Hover me\n    </button>\n  </TooltipGate>\n);\n`;\n\nexport const tooltip_example_2 = `\n// Custom CSS class that overrides the default styles\n.custom-tooltip {\n  .tooltip__inner {\n    padding: 10px;\n    font-family: Arial, Helvetica, sans-serif;\n    line-height: 1.3em;\n  }\n}\n\n// Other custom CSS class to override the default colors.\n// The main classes are:\n// - tooltip__inner: The content of the tooltip\n// - tooltip__arrow, tooltip__arrow-border: The tooltip arrow\n.blue {\n  .tooltip__inner {\n    background-color: #1799bd;\n    border: 1px solid #afebff;\n  }\n\n  .tooltip__arrow {\n    border-color: #1799bd;\n  }\n\n  .tooltip__arrow-border {\n    border-color: #afebff;\n  }\n}\n`;\n","import React, { useCallback, useState } from 'react';\nimport { PopoverGate } from 'react-a-gate';\n/** Components */\nimport CodeBlock from 'components/CodeBlock';\nimport RadioGroup from 'components/RadioGroup';\nimport Checkbox from 'components/Checkbox';\n/** Snippets */\nimport { popover_example_1, popover_example_2 } from 'snippets';\n/** Styles */\nimport './PopoverPage.scss';\n\nconst defaultTriggerPositions = [\n  { label: 'Top', value: 'top' },\n  { label: 'Bottom', value: 'bottom' },\n  { label: 'Left', value: 'left' },\n  { label: 'Right', value: 'right' },\n];\n\nconst defaultPopoverPositions = [\n  { label: 'Top', value: 'top' },\n  { label: 'Bottom', value: 'bottom' },\n  { label: 'Left', value: 'left' },\n  { label: 'Right', value: 'right' },\n];\n\nconst defaultThemes = [\n  { label: 'Dark', value: 'dark' },\n  { label: 'Light', value: 'light' },\n];\n\nconst defaultModes = [\n  { label: 'Click', value: 'click' },\n  { label: 'Hover', value: 'hover' },\n];\n\nconst PopoverContent = () => (\n  <div>\n    I am a <span style={{ color: '#ffd500' }}>popover</span>. Every time you\n    move me, I calculate my position automatically. So, if I should be displayed\n    on the top but there's no space, I just move to the bottom. Same goes for\n    the other positions. If you want to see it, just play around!\n  </div>\n);\n\nconst PopoverPage = () => {\n  const [triggerPosition, setTriggerPosition] = useState('top');\n  const [popoverPosition, setPopoverPosition] = useState('top');\n  const [theme, setTheme] = useState('dark');\n  const [mode, setMode] = useState('dark');\n  const [isCustom, setIsCustom] = useState(false);\n\n  const changeTriggerPosition = useCallback((position) => {\n    setTriggerPosition(position);\n  }, []);\n\n  const changePopoverPosition = useCallback((position) => {\n    setPopoverPosition(position);\n  }, []);\n\n  \n  const changeUseCustom = useCallback((value) => {\n    setIsCustom(value);\n    \n    if (!value) {\n      setTheme('dark');\n    }\n  }, []);\n  \n  const changeTheme = useCallback((theme) => {\n    setTheme(theme);\n  }, []);\n  \n  const changeMode = useCallback((mode) => {\n    setMode(mode);\n  }, []);\n\n  return (\n    <div className=\"popoverPage__container\">\n      <div className=\"popoverPage__wrapper\">\n        <div className=\"popoverPage__config\">\n          <div className=\"popoverPage__block\">\n            <h5>Trigger position:</h5>\n            <RadioGroup\n              name=\"trigger_position\"\n              options={defaultTriggerPositions}\n              initialValue=\"top\"\n              onChange={changeTriggerPosition}\n            />\n            <h5>Popover position:</h5>\n            <RadioGroup\n              name=\"popover_position\"\n              options={defaultPopoverPositions}\n              initialValue=\"top\"\n              onChange={changePopoverPosition}\n            />\n          </div>\n          <div className=\"popoverPage__block\">\n            {!isCustom && (\n              <>\n                <h5>Theme:</h5>\n                <RadioGroup\n                  name=\"popover_theme\"\n                  options={defaultThemes}\n                  initialValue=\"dark\"\n                  onChange={changeTheme}\n                />\n              </>\n            )}\n            <Checkbox\n              id=\"custom__popover\"\n              value=\"custom_popover\"\n              defaultChecked={isCustom}\n              onChange={changeUseCustom}\n            >\n              Customize popover?\n            </Checkbox>\n            <h5 style={{ marginTop: '10px' }} >Mode:</h5>\n            <RadioGroup\n              name=\"popover_mode\"\n              options={defaultModes}\n              initialValue=\"click\"\n              onChange={changeMode}\n            />\n          </div>\n        </div>\n        <CodeBlock value={popover_example_1}></CodeBlock>\n        <CodeBlock language=\"sass\" value={popover_example_2}></CodeBlock>\n        <br/>\n        <br/>\n      </div>\n      <div className={`popoverPage__button-wrapper popoverPage__button-wrapper--${triggerPosition}`}>\n        <PopoverGate\n          content={<PopoverContent />}\n          place={popoverPosition}\n          theme={theme}\n          mode={mode}\n          className={`custom-popover${isCustom ? ' blue' : ''}`}\n        >\n          <button\n            type=\"button\"\n            className=\"popoverPage__button\"\n          >\n            {mode === 'hover' ? 'Hover' : 'Click'} me\n          </button>\n        </PopoverGate>\n      </div>\n    </div>\n  );\n};\n\nexport default PopoverPage;\n","import ModalPage from 'pages/ModalPage';\nimport TooltipPage from 'pages/TooltipPage';\nimport PopoverPage from 'pages/PopoverPage';\n\nconst routes = [\n  {\n    id: 1,\n    path: '/',\n    exact: true,\n    RouteComponent: ModalPage,\n  },\n  {\n    id: 2,\n    path: '/modal',\n    exact: true,\n    RouteComponent: ModalPage,\n  },\n  {\n    id: 3,\n    path: '/tooltip',\n    exact: true,\n    RouteComponent: TooltipPage,\n  },\n  {\n    id: 4,\n    path: '/popover',\n    exact: true,\n    RouteComponent: PopoverPage,\n  },\n];\n\nexport default routes;\n","export const popover_example_1 = `\nimport React, { useState } from 'react';\nimport { PopoverGate } from 'react-a-gate';\n/** Styles */\nimport './App.scss';\n\nconst PopoverContent = () => (\n  <div>\n    I am a <span style={{ color: '#ffd500' }}>popover</span>. Every time you\n    move me, I calculate my position automatically. So, if I should be displayed\n    on the top but there's no space, I just move to the bottom. Same goes for\n    the other positions. If you want to see it, just play around!\n  </div>\n);\n\nconst App = () => (\n  <!-- Popover wrapper -->\n  <PopoverGate\n    content={<PopoverContent />}\n    place=\"top\"\n    mode=\"click\"\n    className=\"custom-popover\"\n  >\n    <!-- Trigger element -->\n    <button type=\"button\" className='popoverPage__button'>\n      Hover me\n    </button>\n  </PopoverGate>\n);\n`;\n\nexport const popover_example_2 = `\n// Custom CSS class that overrides the default styles\n.custom-popover {\n  .popover__inner {\n    padding: 10px;\n    font-family: Arial, Helvetica, sans-serif;\n    line-height: 1.3em;\n  }\n}\n\n// Other custom CSS class to override the default colors.\n// The main classes are:\n// - popover__inner: The content of the popover\n// - popover__arrow, popover__arrow-border: The popover arrow\n.blue {\n  .popover__inner {\n    background-color: #1799bd;\n    border: 1px solid #afebff;\n  }\n\n  .popover__arrow {\n    border-color: #1799bd;\n  }\n\n  .popover__arrow-border {\n    border-color: #afebff;\n  }\n}\n`;\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n/** Components */\nimport Layout from 'components/Layout';\n/** Config */\nimport routes from './config';\n\nexport const Routes = () => (\n  <Layout>\n    <Switch>\n      {/* Routes */}\n      {Array.isArray(routes) &&\n        routes.map(({ id, path, exact, RouteComponent }) => {\n          return (\n            <Route\n              key={id}\n              path={path}\n              exact={exact}\n              component={RouteComponent}\n            />\n          );\n        })}\n      <Redirect to=\"/\" />\n    </Switch>\n  </Layout>\n);\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\nexport const registerIcons = () => {\n  // Add font awesome icons to the library in order to import just used icons\n  library.add(fab, faTimes);\n};\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n/** Utils */\nimport { registerIcons } from 'utils/fontAwesomeLibrary';\n/** Components */\nimport { Routes } from 'routes/Routes';\n/** Styles */\nimport './App.scss';\n\nregisterIcons();\n\nconst App = () => {\n  return (\n    <BrowserRouter basename=\"/\">\n      <Routes />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\n/** Containers */\nimport App from 'containers/App';\n/** Styles */\nimport 'styles/main.scss';\n\nconst mountNode = document.getElementById('root');\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  mountNode\n);\n"],"sourceRoot":""}